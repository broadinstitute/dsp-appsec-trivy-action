name: Docker image parse and scan
description: Parse Dockerfile and build, scan the image if a "blessed" base image is not used

inputs:
  context:
    description: Path to Docker build context (omit if using the 'image' option)
    required: false
    default: .
  dockerfile:
    description: Path to Dockerfile within the build context (omit if using the 'image' option)
    required: false
    default: Dockerfile
  image:
    description: Pre-built Docker image URL to scan (omit if using the 'dockerfile' option)
    required: false
    default: ''
  type:
    description: Comma-delimited list of scan types
    required: false
    default: os
  severities:
    description: Comma-delimited list of severities for Trivy
    required: false
    default: CRITICAL
  sarif:
    description: 'Sarif template output path relative to repository root, if any (example: trivy-results.sarif)'
    required: false
    default: ''
  security-checks:
    description: 'Does not scan image for secrets, but only vulnerabilities'
    required: false
    default: vuln

runs:
  using: composite
  steps:
    - shell: bash
      working-directory: ${{ inputs.context }}
      env:
        BASE_PREFIX: us.gcr.io/broad-dsp-gcr-public/base
        IMAGE: ${{ inputs.image }}
      run: |
        # Check if using a pre-built image
        if [ -n "${IMAGE}" ] ; then
          echo "Checking if pre-built image is using a DSP AppSec blessed image ... "

          TMPBIN="$(mktemp -d)"
          pushd "${TMPBIN}"
          if ! command -v jq ; then
            echo "Downloading jq ... "
            curl -sLo jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
            chmod +x jq
          fi
          if ! command -v crane ; then
            echo "Downloading crane ... "
            curl -sLo- https://github.com/google/go-containerregistry/releases/latest/download/go-containerregistry_Linux_x86_64.tar.gz | tar xzf -
          fi
          popd

          PATH="${PATH}:${TMPBIN}"
          cleanup() {
            rm -rf ${TMPBIN}
          }
          remote_layers() {
            crane config "$1" | jq -r '.rootfs.diff_ids[]'
          }

          echo "Listing image layers ... "
          layers=$(docker image inspect "${IMAGE}" | jq -r '.[].RootFS.Layers[]')

          if [ -z "${layers}" ] ; then
            echo "Image is not local, fetching layers from the registry ... "
            layers="$(remote_layers "${IMAGE}")"
          fi

          if [ -n "${layers}" ] ; then
            echo "Comparing with layers of tagged blessed images ... "
            for lang in jre nodejs python nginx ruby ; do
              crane ls "${BASE_PREFIX}/${lang}" | while read tag ; do

                blessed_image="${BASE_PREFIX}/${lang}:${tag}"
                echo blessed_image: "${blessed_image}"
                blessed_layers="$(remote_layers "${blessed_image}")"
                echo blessed_layers: "${blessed_layers}"
                echo "${blessed_layers}" | wc -l | read -r n_layers
                echo n_layers "${n_layers}"
                trunc_layers="$(echo "${layers}" | head -n "${n_layers}")"

                if [ "${trunc_layers}" = "${blessed_layers}" ] ; then
                  echo "DSP AppSec blessed image ${blessed_image} is used, skipping scan"
                  cleanup
                  exit 0
                fi
              done
            done
          fi
          cleanup
        else
          # Exit early if a "blessed" base image is used in the last stage of the Dockerfile
          if grep "^FROM " "${{ inputs.dockerfile }}" | tail -1 | grep -q "^FROM ${BASE_PREFIX}/" ; then
            echo "This Dockerfile is using a DSP AppSec team's blessed image at runtime, no need to scan"
            exit 0
          fi

          # Build the image
          echo "Building the Docker image ... "
          REPO="${{ github.repository }}"
          IMAGE="${REPO,,}:${{ github.sha }}" # converts ${REPO} to lowercase
          docker build -t "${IMAGE}" -f "${{ inputs.dockerfile }}" .
        fi

        # Scan the image with Trivy, fail the job if there is a relevant vulnerability
        echo "Scanning the Docker image ... "
        opt_args="--exit-code 1"
        if [ -n "${{ inputs.sarif }}" ]; then
          # set options for Sarif template output
          opt_args="--format template --template @contrib/sarif.tpl --output /workspace/${{ inputs.sarif }}"
        fi

        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock:ro -v "${{ github.workspace }}:/workspace" aquasec/trivy image \
          --security-checks "${{ inputs.security-checks }}" \
          --vuln-type "${{ inputs.type }}" --severity "${{ inputs.severities }}" \
          --ignore-unfixed --no-progress --timeout 10m ${opt_args} "${IMAGE}"
