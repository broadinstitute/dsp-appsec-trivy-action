name: Docker image parse and scan
description: Parse Dockerfile and build, scan the image if a "blessed" base image is not used

inputs:
  context:
    description: Path to Docker build context (omit if using the 'image' option)
    required: false
    default: .
  dockerfile:
    description: Path to Dockerfile within the build context (omit if using the 'image' option)
    required: false
    default: Dockerfile
  image:
    description: Pre-built Docker image URL to scan (omit if using the 'dockerfile' option)
    required: false
    default: ''
  type:
    description: Comma-delimited list of scan types
    required: false
    default: os
  severities:
    description: Comma-delimited list of severities for Trivy
    required: false
    default: CRITICAL
  sarif:
    description: 'Sarif template output path relative to workspace dir, if any (example: trivy-results.sarif)'
    required: false
    default: ''

runs:
  using: composite
  steps:
    - shell: bash
      working-directory: ${{ inputs.context }}
      env:
        BASE_PREFIX: us.gcr.io/broad-dsp-gcr-public/base/
      run: |
        # Check if using a pre-built image
        if [ -n "${{ inputs.image }}" ] ; then
          IMAGE="${{ inputs.image }}"
        else
          # Exit early if a "blessed" base image is used in the last stage of the Dockerfile
          if grep "^FROM " "${{ inputs.dockerfile }}" | tail -1 | grep -q "^FROM ${BASE_PREFIX}" ; then
            echo "This Dockerfile is using a DSP AppSec team's blessed image at runtime, no need to scan"
            exit 0
          fi

          # Build the image
          echo "Building the Docker image ... "
          REPO="${{ github.repository }}"
          IMAGE="${REPO,,}:${{ github.sha }}" # converts ${REPO} to lowercase
          docker build -t "${IMAGE}" -f "${{ inputs.dockerfile }}" .
        fi

        # Scan the image with Trivy, fail the job if there is a relevant vulnerability
        echo "Scanning the Docker image ... "
        format_args=""
        if [ -n "${{ inputs.sarif }}" ]; then
          # add options for Sarif template output
          format_args="--format template --template '@contrib/sarif.tpl' --output '/workspace/${{ inputs.sarif }}'"
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock:ro -v "${{ github.workspace }}:/workspace" aquasec/trivy \
            --vuln-type "${{ inputs.type }}" --severity "${{ inputs.severities }}" \
            --ignore-unfixed --exit-code 1 --no-progress --timeout 10m --format template --template '@contrib/sarif.tpl' --output '/workspace/${{ inputs.sarif }}' "${IMAGE}"
        fi

        echo "${format_args}"
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock:ro -v "${{ github.workspace }}:/workspace" aquasec/trivy \
          --vuln-type "${{ inputs.type }}" --severity "${{ inputs.severities }}" \
          --ignore-unfixed --exit-code 1 --no-progress --timeout 10m "${IMAGE}"
